{"version":3,"file":"js/559.3d5b482c.js","mappings":"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","sources":["webpack://portfolio/./src/views/projects/Jeux/MemoryGame.vue","webpack://portfolio/src/views/projects/Jeux/MemoryGame.vue","webpack://portfolio/./src/views/projects/Jeux/MemoryGame.vue?5b3e","webpack://portfolio/./src/views/projects/Jeux/MemoryGame.vue?0267"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('form',{on:{\"submit\":function($event){$event.preventDefault();return _vm.startGame.apply(null, arguments)}}},[_c('label',{attrs:{\"for\":\"pairs\"}},[_vm._v(\"Nombre de paires :\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.pairs),expression:\"pairs\"}],attrs:{\"type\":\"number\",\"id\":\"pairs\",\"min\":\"1\",\"value\":\"4\"},domProps:{\"value\":(_vm.pairs)},on:{\"input\":function($event){if($event.target.composing)return;_vm.pairs=$event.target.value}}}),_c('br'),_c('label',{attrs:{\"for\":\"unlimited\"}},[_vm._v(\"Temps illimité :\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.unlimited),expression:\"unlimited\"}],attrs:{\"type\":\"checkbox\",\"id\":\"unlimited\"},domProps:{\"checked\":Array.isArray(_vm.unlimited)?_vm._i(_vm.unlimited,null)>-1:(_vm.unlimited)},on:{\"change\":function($event){var $$a=_vm.unlimited,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.unlimited=$$a.concat([$$v]))}else{$$i>-1&&(_vm.unlimited=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.unlimited=$$c}}}}),_c('br'),(!_vm.unlimited)?_c('div',[_c('label',{attrs:{\"for\":\"timer\"}},[_vm._v(\"Durée du timer (en secondes) :\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.time),expression:\"time\"}],attrs:{\"type\":\"number\",\"id\":\"timer\",\"min\":\"10\",\"max\":\"600\",\"value\":\"60\"},domProps:{\"value\":(_vm.time)},on:{\"input\":function($event){if($event.target.composing)return;_vm.time=$event.target.value}}}),_c('br')]):_vm._e(),_c('input',{attrs:{\"type\":\"submit\"},domProps:{\"value\":_vm.cards.length > 0 ?  'Nouvelle partie': 'Commencer le jeu'}})]),_c('div',{attrs:{\"id\":\"memory-grid\"}},_vm._l((_vm.cards),function(card){return _c('div',{key:card.id,staticClass:\"card\",class:{ flipped: card.flipped },on:{\"click\":function($event){return _vm.flipCard(card)}}},[_c('div',{staticClass:\"card-inner\"},[_c('div',{staticClass:\"card-front\"}),_c('div',{staticClass:\"card-back\",style:({ backgroundColor: card.color })},[_vm._v(\" \"+_vm._s(card.value)+\" \")])])])}),0),(_vm.timerDisplay)?_c('div',{attrs:{\"id\":\"timer\"}},[_vm._v(\"Temps restant: \"+_vm._s(_vm.timerDisplay))]):_vm._e(),(_vm.gameOverMessage)?_c('div',{attrs:{\"id\":\"game-over-message\"}},[_vm._v(_vm._s(_vm.gameOverMessage))]):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div>\n      <form @submit.prevent=\"startGame\">\n        <label for=\"pairs\">Nombre de paires :</label>\n        <input type=\"number\" id=\"pairs\" v-model=\"pairs\" min=\"1\" value=\"4\"><br>\n        <label for=\"unlimited\">Temps illimité :</label>\n        <input type=\"checkbox\" id=\"unlimited\" v-model=\"unlimited\"><br>\n        <div v-if=\"!unlimited\">\n            <label for=\"timer\">Durée du timer (en secondes) :</label>\n            <input type=\"number\" id=\"timer\" v-model=\"time\" min=\"10\" max=\"600\" value=\"60\"><br>\n        </div>\n        <input type=\"submit\" :value=\"cards.length > 0 ?  'Nouvelle partie': 'Commencer le jeu' \">\n      </form>\n      <div id=\"memory-grid\">\n      <div\n        v-for=\"card in cards\"\n        :key=\"card.id\"\n        class=\"card\"\n        :class=\"{ flipped: card.flipped }\"\n        @click=\"flipCard(card)\"\n        >\n            <div class=\"card-inner\">\n            <div class=\"card-front\">\n                <!-- Contenu visible lorsque la carte est face cachée -->\n            </div>\n            <div class=\"card-back\" :style=\"{ backgroundColor: card.color }\">\n                {{ card.value }}\n            </div>\n            </div>\n        </div>\n    </div>\n      <div v-if=\"timerDisplay\" id=\"timer\">Temps restant: {{ timerDisplay }}</div>\n      <div v-if=\"gameOverMessage\" id=\"game-over-message\">{{ gameOverMessage }}</div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    name: 'memoryGame',\n    data() {\n      return {\n        pairs: 4,\n        time: 60,\n        unlimited: true,\n        cards: [],\n        flippedCards: [],\n        score: 0,\n        timerId: null,\n        timerDisplay: null,\n        gameOverMessage: null,\n      };\n    },\n    methods: {\n      startTimer(timeRemaining) {\n        this.timerDisplay = timeRemaining;\n  \n        this.timerId = setInterval(() => {\n          timeRemaining--;\n          this.timerDisplay = timeRemaining;\n  \n          if (timeRemaining === 0) {\n            clearInterval(this.timerId);\n            this.endGame();\n          }\n        }, 1000);\n      },\n      createCards() {\n        const cardValues = [];\n        const cardColors = [];\n        for (let i = 1; i <= this.pairs; i++) {\n          cardValues.push(i.toString(), i.toString());\n          cardColors.push(`hsl(${Math.random() * 360}, 100%, 50%)`);\n        }\n  \n        const shuffledValues = this.shuffle(cardValues);\n        this.cards = shuffledValues.map((value, index) => ({\n          id: index,\n          value,\n          color: cardColors[parseInt(value) - 1],\n          flipped: false,\n        }));\n      },\n      shuffle(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n      },\n      flipCard(card) {\n        if (this.flippedCards.length < 2 && !this.flippedCards.includes(card) && !card.flipped) {\n          card.flipped = true;\n\n          this.flippedCards.push(card);\n  \n          if (this.flippedCards.length === 2) {\n            const [card1, card2] = this.flippedCards;\n            if (card1.value === card2.value) {\n              this.score += 10;\n              this.flippedCards = [];\n            } else {\n              setTimeout(() => {\n                card1.flipped = false;\n                card2.flipped = false;\n                this.flippedCards = [];\n              }, 1000);\n            }\n          }\n        }\n      },\n      startGame() {\n        this.createCards();\n        this.score = 0;\n        this.timerDisplay = null;\n        this.gameOverMessage = null;\n  \n        if (!this.unlimited) {\n          this.startTimer(this.time);\n        }\n      },\n      endGame() {\n        this.gameOverMessage = `Jeu terminé ! Votre score est de ${this.score}.`;\n        this.cards.forEach(card => card.flipped = false);\n        this.flippedCards = [];\n      },\n    },\n  };\n  </script>\n  <style scoped>\n  \n  form {\n    margin: 20px;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n  }\n  \n  label {\n    display: block;\n    font-weight: bold;\n    font-size: 18px;\n    color: #2c3e50;\n    margin-top: 10px;\n  }\n  \n  input[type=\"number\"] {\n    width: 50px;\n    margin: 5px 0px 10px 10px;\n    padding: 5px;\n    border-radius: 5px;\n    border: none;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n\n  }\n  \n  input[type=\"checkbox\"] {\n    margin-right: 10px;\n    border: 1px solid #ccc;\n    padding: 8px;\n    font-size: 16px;\n    margin-bottom: 10px;\n  }\n  \n  input[type=\"submit\"] {\n    padding: 10px;\n    background-color: #1abc9c;\n    color: #fff;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: background-color 0.3s ease-in-out;\n    font-size: 18px;\n    font-weight: bold;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n  }\n  \n  input[type=\"submit\"]:hover {\n    background-color: #148f77;\n  }\n  \n  #memory-grid {\n    margin: 20px;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    max-width: 800px;\n    margin: 0 auto;\n  }\n  \n  .card {\n    width: 100px;\n    height: 100px;\n    margin: 10px;\n    perspective: 1000px; /* Needed for 3D flip */\n    display: inline-block;\n    cursor: pointer;\n  }\n  \n  .card-inner {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    transition: transform 0.6s;\n    transform-style: preserve-3d;\n  }\n  \n  .card.flipped .card-inner {\n    transform: rotateY(180deg);\n  }\n  \n  .card-front,\n  .card-back {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    backface-visibility: hidden;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 24px;\n    border-radius: 10px;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n  }\n  \n  .card-front {\n    background-color: #ccc;\n  }\n  \n  .card-back {\n    transform: rotateY(180deg);\n  }\n  </style>\n  ","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MemoryGame.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MemoryGame.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./MemoryGame.vue?vue&type=template&id=89f3eda0&scoped=true\"\nimport script from \"./MemoryGame.vue?vue&type=script&lang=js\"\nexport * from \"./MemoryGame.vue?vue&type=script&lang=js\"\nimport style0 from \"./MemoryGame.vue?vue&type=style&index=0&id=89f3eda0&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"89f3eda0\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","on","$event","preventDefault","startGame","apply","arguments","attrs","_v","directives","name","rawName","value","pairs","expression","domProps","target","composing","unlimited","Array","isArray","_i","$$a","$$el","$$c","checked","$$v","$$i","concat","slice","_e","time","cards","length","_l","card","key","id","staticClass","class","flipped","flipCard","style","backgroundColor","color","_s","timerDisplay","gameOverMessage","staticRenderFns","data","flippedCards","score","timerId","methods","startTimer","timeRemaining","setInterval","clearInterval","endGame","createCards","cardValues","cardColors","i","push","toString","Math","random","shuffledValues","shuffle","map","index","parseInt","array","j","floor","includes","card1","card2","setTimeout","forEach","component"],"sourceRoot":""}